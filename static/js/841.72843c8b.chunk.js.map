{"version":3,"file":"static/js/841.72843c8b.chunk.js","mappings":"+SAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,WAAOC,EAAWC,EAAWC,GAA7B,uFACFL,EAAAA,EAAAA,IAAA,WACjBG,EADiB,YACJC,EADI,YACSC,EADT,oBAC+BJ,IAF7B,cACnBK,EADmB,yBAIlBA,EAASC,MAJS,2CAAH,0DAOXC,EAAY,mCAAG,WAAMC,GAAN,uFACHT,EAAAA,EAAAA,IAAA,iBAAoBS,EAApB,oBAAuCR,IADpC,cACpBK,EADoB,yBAEnBA,EAASC,MAFU,2CAAH,sDAKZG,EAAmB,mCAAG,WAAMD,GAAN,uFACVT,EAAAA,EAAAA,IAAA,iBACXS,EADW,4BACgBR,EADhB,oBADU,cAC3BK,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,sDAOnBI,EAAmB,mCAAG,WAAMF,GAAN,uFACVT,EAAAA,EAAAA,IAAA,iBACXS,EADW,4BACgBR,EADhB,2BADU,cAC3BK,EAD2B,yBAI1BA,GAJ0B,2CAAH,sDAOnBM,EAAQ,mCAAG,WAAMC,GAAN,uFACCb,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBY,IAFtB,cAChBP,EADgB,yBAIfA,GAJe,2CAAH,qD,4KC5BfQ,EAAkBC,EAAAA,GAAAA,IAAH,iEA8BrB,I,EAAA,EAzBA,YAAkC,IAAVC,EAAS,EAATA,MACtB,OACE,0BAC0B,OAAvBA,EAAMC,cACL,SAACH,EAAD,CAAiBI,IAAI,qCAErB,SAACJ,EAAD,CACEI,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGf,uBAAIJ,EAAMI,QACV,uCAAeJ,EAAMK,eAG1B,ECnBYC,EAAiBP,EAAAA,GAAAA,GAAH,0GAyB3B,MAlBA,YAA6B,IAATQ,EAAQ,EAARA,KAClB,OACE,SAACD,EAAD,UACGC,EAAKC,KAAI,SAAAR,GACR,OAAO,SAAC,EAAD,CAAkCA,MAAOA,GAAtBA,EAAMS,QACjC,KAGN,E,OCgBD,MA5BA,WACE,IAAQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,QACR,GAAkCkB,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOJ,EAAP,KAAaO,EAAb,KAEMC,EAAgB,mCAAG,2FACvBF,GAAa,GADU,mBAGEnB,EAAAA,EAAAA,IAAoBD,GAHtB,OAGfH,EAHe,OAIrBwB,EAAQxB,EAASiB,MAJI,yEAOrBM,GAAa,GAPQ,4EAAH,qDAgBtB,OALAG,EAAAA,EAAAA,YAAU,WACRD,GAED,GAAE,KAGD,SAAC,KAAD,UACGH,GAAY,SAACK,EAAA,EAAD,CAASC,KAAM,UAAa,SAAC,EAAD,CAAUX,KAAMA,KAG9D,C","sources":["Services/Api.js","components/CastListItem/CastListItem.jsx","components/CastList/CastList.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9419a46407ab6d0a86a089cd8749b3b7';\n\nexport const fetchMovies = async (queryType, mediaType, timeWindow) => {\n  const response = await axios.get(\n    `/${queryType}/${mediaType}/${timeWindow}?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response;\n};\n\nexport const getMovie = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response;\n};\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledCastThumb = styled.img`\n  display: block;\n  max-height: 100px;\n`;\n\nfunction CastListItem({ actor }) {\n  return (\n    <li>\n      {actor.profile_path === null ? (\n        <StyledCastThumb src=\"https://via.placeholder.com/150\" />\n      ) : (\n        <StyledCastThumb\n          src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n          alt={actor.name}\n        />\n      )}\n      <p>{actor.name}</p>\n      <p>Character: {actor.character}</p>\n    </li>\n  );\n}\n\nCastListItem.propTypes = {\n  actor: PropTypes.shape({\n    profile_path: PropTypes.string,\n    name: PropTypes.string,\n    character: PropTypes.string,\n  }),\n};\n\nexport default CastListItem;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport CastListItem from 'components/CastListItem/CastListItem';\n\nexport const StyledCastList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  padding-left: 18px;\n`;\n\nfunction CastList({ cast }) {\n  return (\n    <StyledCastList>\n      {cast.map(actor => {\n        return <CastListItem key={actor.cast_id} actor={actor} />;\n      })}\n    </StyledCastList>\n  );\n}\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default CastList;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCreditsById } from 'Services/Api';\nimport { StyledSection } from 'Layouts/AppTemplate/AppTemplate.styled';\nimport CastList from 'components/CastList/CastList';\nimport Loading from 'components/Loading/Loading';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const [cast, setCast] = useState([]);\n\n  const loadMovieCredits = async () => {\n    setIsLoading(true);\n    try {\n      const response = await getMovieCreditsById(movieId);\n      setCast(response.cast);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadMovieCredits();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <StyledSection>\n      {isLoading ? <Loading text={'cast'} /> : <CastList cast={cast} />}\n    </StyledSection>\n  );\n}\n\nexport default Cast;\n"],"names":["axios","API_KEY","fetchMovies","queryType","mediaType","timeWindow","response","data","getMovieById","movieId","getMovieCreditsById","getMovieReviewsById","getMovie","query","StyledCastThumb","styled","actor","profile_path","src","alt","name","character","StyledCastList","cast","map","cast_id","useParams","useState","isLoading","setIsLoading","setCast","loadMovieCredits","useEffect","Loading","text"],"sourceRoot":""}