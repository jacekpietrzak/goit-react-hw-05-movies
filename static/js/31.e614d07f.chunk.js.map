{"version":3,"file":"static/js/31.e614d07f.chunk.js","mappings":"8SAQAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAW,mCAAG,WAAOC,EAAWC,EAAWC,EAAYC,GAAzC,uFACFN,EAAAA,EAAAA,IAAA,WACjBG,EADiB,YACJC,EADI,YACSC,EADT,oBAC+BJ,IAF7B,cACnBM,EADmB,yBAKlBA,EAASC,MALS,2CAAH,4DAQXC,EAAY,mCAAG,WAAMC,GAAN,uFACHV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,oBAAuCT,IADpC,cACpBM,EADoB,yBAGnBA,EAASC,MAHU,2CAAH,sDAMZG,EAAmB,mCAAG,WAAMD,GAAN,uFACVV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,oBADU,cAC3BM,EAD2B,yBAK1BA,EAASC,MALiB,2CAAH,sDAQnBI,EAAmB,mCAAG,WAAMF,GAAN,uFACVV,EAAAA,EAAAA,IAAA,iBACXU,EADW,4BACgBT,EADhB,2BADU,cAC3BM,EAD2B,yBAK1BA,GAL0B,2CAAH,sDASnBM,EAAQ,mCAAG,WAAMP,GAAN,uFACCN,EAAAA,EAAAA,IAAA,gCACIC,EADJ,kBACqBK,IAFtB,cAChBC,EADgB,yBAKfA,GALe,2CAAH,qD,oFCrBrB,I,EAAA,EAlBA,YAA6C,IAApBO,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC9B,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,EAAMG,IAAMC,MAAO,CAAEC,KAAMJ,GAAhD,SACGD,EAAMM,SAId,ECPKC,E,OAAaC,GAAAA,GAAH,yGAwBhB,MAjBA,YAA0C,IAArBC,EAAoB,EAApBA,OAAQR,EAAY,EAAZA,SAC3B,OACE,SAACM,EAAD,UACGE,EAAOC,KAAI,SAAAV,GACV,OACE,SAAC,EAAD,CAA8BA,MAAOA,EAAOC,SAAUA,GAAlCD,EAAMG,GAE7B,KAGN,C,4KClBKQ,EAAcH,EAAAA,GAAAA,MAAH,yCAIXI,EAAeJ,EAAAA,GAAAA,OAAH,6DAyBlB,MApBA,YAAqE,IAAhDK,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,WACpD,OACE,kBAAMC,SAAUH,EAAhB,WACE,SAACF,EAAD,CACEM,KAAK,OACLC,YAAY,qBACZC,MAAOJ,EACPK,SAAUN,KAEZ,SAACF,EAAD,CAAcK,KAAK,SAAnB,sBAGL,E,gBC8CD,MA/DA,WAAmB,IAAD,EAChB,GAAkCI,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAON,EAAP,KAAmBS,EAAnB,KACA,GAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAegB,EAAf,KACMxB,GAAWyB,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAb,UAAiB,SAAjB,EAA4B,IAQxCC,EAAS,mCAAG,2FAChBT,GAAa,GADG,mBAGSxB,EAAAA,EAAAA,IAAS+B,GAHlB,OAGRrC,EAHQ,OAIdgC,EAAUhC,EAASC,KAAKuC,SAJV,yEAOdV,GAAa,GAPC,4EAAH,qDAoBTW,EAAoB,SAAA1C,GAExBqC,EAD6B,KAAVrC,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEhD,EASD,OAPA2C,EAAAA,EAAAA,YAAU,WACU,OAAdL,GACFE,GAGH,GAAE,KAGD,iCACE,SAAC,EAAD,CACEnB,aAxBe,SAAAuB,GACnBA,EAAMC,iBACY,OAAdP,EACFE,IAEAM,MAAM,iBAET,EAkBKxB,kBA1CoB,SAAAsB,GACxB,IAAM5C,EAAQ4C,EAAMG,OAAOpB,MAC3BK,EAAchC,GACd0C,EAAkB1C,EACnB,EAuCKuB,WAAYA,IAGbO,GACC,SAACkB,EAAA,EAAD,KAEA,SAACC,EAAA,EAAD,CAAWhC,OAAQA,EAAQR,SAAUA,MAI5C,C","sources":["Services/Api.js","components/MovieListItem/MovieListItem.jsx","components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.jsx","components/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\n// /trending/get-trending\n// /search/search-movies\n// /movies/get-movie-details\n// /movies/get-movie-credits\n// /movies/get-movie-reviews\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '9419a46407ab6d0a86a089cd8749b3b7';\n\nexport const fetchMovies = async (queryType, mediaType, timeWindow, query) => {\n  const response = await axios.get(\n    `/${queryType}/${mediaType}/${timeWindow}?api_key=${API_KEY}`\n  );\n  // console.log('Api fetchMovies', response);\n  return response.data;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n  // console.log('Api MovieById', response);\n  return response.data;\n};\n\nexport const getMovieCreditsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  // console.log('Api credits:', response);\n  return response.data;\n};\n\nexport const getMovieReviewsById = async movieId => {\n  const response = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  // console.log('Api reviews:', response);\n  return response;\n};\n\n// /search/search-movies\nexport const getMovie = async query => {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  // console.log('getMovie', response);\n  return response;\n};\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction MovieListItem({ movie, location }) {\n  return (\n    <li>\n      <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n        {movie.title}\n      </Link>\n    </li>\n  );\n}\n\nMovieListItem.propTypes = {\n  location: PropTypes.object,\n  movie: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }),\n};\n\nexport default MovieListItem;\n","import PropTypes from 'prop-types';\nimport MovieListItem from 'components/MovieListItem/MovieListItem';\nimport styled from 'styled-components';\n\nconst StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  padding-left: 18px;\n`;\n\nfunction MovieList({ movies, location }) {\n  return (\n    <StyledList>\n      {movies.map(movie => {\n        return (\n          <MovieListItem key={movie.id} movie={movie} location={location} />\n        );\n      })}\n    </StyledList>\n  );\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n  location: PropTypes.object,\n};\n\nexport default MovieList;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n  padding: 5px;\n`;\n\nconst StyledButton = styled.button`\n  padding: 5px;\n  cursor: pointer;\n`;\n\nfunction Searchbar({ handleSubmit, handleInputChange, inputValue }) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <StyledInput\n        type=\"text\"\n        placeholder=\"search for a movie\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n      <StyledButton type=\"submit\">Search</StyledButton>\n    </form>\n  );\n}\n\nSearchbar.propTypes = {\n  handleSubmit: PropTypes.func,\n  handleInputChange: PropTypes.func,\n  inputValue: PropTypes.string,\n};\n\nexport default Searchbar;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovie } from 'Services/Api';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport MovieList from 'components/MovieList/MovieList';\nimport Loading from 'components/Loading/Loading';\n\nfunction Movies() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query' ?? '');\n\n  const handleInputChange = event => {\n    const query = event.target.value;\n    setInputValue(query);\n    updateQueryString(query);\n  };\n\n  const loadMovie = async () => {\n    setIsLoading(true);\n    try {\n      const response = await getMovie(movieName);\n      setMovies(response.data.results);\n    } catch (error) {\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (movieName !== null) {\n      loadMovie();\n    } else {\n      alert('type something');\n    }\n  };\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    if (movieName !== null) {\n      loadMovie();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <Searchbar\n        handleSubmit={handleSubmit}\n        handleInputChange={handleInputChange}\n        inputValue={inputValue}\n      />\n\n      {isLoading ? (\n        <Loading />\n      ) : (\n        <MovieList movies={movies} location={location} />\n      )}\n    </>\n  );\n}\n\nexport default Movies;\n"],"names":["axios","API_KEY","fetchMovies","queryType","mediaType","timeWindow","query","response","data","getMovieById","movieId","getMovieCreditsById","getMovieReviewsById","getMovie","movie","location","to","id","state","from","title","StyledList","styled","movies","map","StyledInput","StyledButton","handleSubmit","handleInputChange","inputValue","onSubmit","type","placeholder","value","onChange","useState","isLoading","setIsLoading","setInputValue","setMovies","useLocation","useSearchParams","searchParams","setSearchParams","movieName","get","loadMovie","results","updateQueryString","useEffect","event","preventDefault","alert","target","Loading","MovieList"],"sourceRoot":""}